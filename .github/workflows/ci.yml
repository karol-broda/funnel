name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'

jobs:
  lint:
    name: Lint (Fast Check)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum', '**/go.work.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: make deps

    - name: Check formatting
      run: |
        make fmt
        if [ -n "$(git status --porcelain)" ]; then
          echo "code is not formatted properly"
          git diff
          exit 1
        fi

    - name: Run linter
      run: make lint

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum', '**/go.work.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: make deps

    - name: Run tests
      run: make test

    - name: Generate test coverage
      run: |
        echo "running coverage across all modules..."
        for dir in $(find . -name "go.mod" -not -path "./go.work*" -exec dirname {} \; | sort); do
          echo "generating coverage for module in $dir..."
          (cd $dir && go test -v -coverprofile="coverage.out" ./... && echo "coverage generated for $dir" && rm -f coverage.out)
        done

  build:
    name: Build (Cross Platform)
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum', '**/go.work.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: make deps

    - name: Build binaries
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        EXT=""
        if [ "$GOOS" = "windows" ]; then
          EXT=".exe"
        fi
        
        echo "building tunnel-client for $GOOS/$GOARCH..."
        GOOS=$GOOS GOARCH=$GOARCH go build \
          -ldflags "-X github.com/karol-broda/go-tunnel-proxy/version.Version=0.0.1a \
                    -X github.com/karol-broda/go-tunnel-proxy/version.BuildDate=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
                    -X github.com/karol-broda/go-tunnel-proxy/version.GitCommit=${GITHUB_SHA::7} \
                    -X github.com/karol-broda/go-tunnel-proxy/version.GitTag=${GITHUB_REF#refs/tags/} \
                    -s -w" \
          -o tunnel-client-$GOOS-$GOARCH$EXT \
          ./cmd/tunnel-client
        
        echo "building tunnel-server for $GOOS/$GOARCH..."
        GOOS=$GOOS GOARCH=$GOARCH go build \
          -ldflags "-X github.com/karol-broda/go-tunnel-proxy/version.Version=0.0.1a \
                    -X github.com/karol-broda/go-tunnel-proxy/version.BuildDate=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
                    -X github.com/karol-broda/go-tunnel-proxy/version.GitCommit=${GITHUB_SHA::7} \
                    -X github.com/karol-broda/go-tunnel-proxy/version.GitTag=${GITHUB_REF#refs/tags/} \
                    -s -w" \
          -o tunnel-server-$GOOS-$GOARCH$EXT \
          ./cmd/tunnel-server
        
        echo "build completed successfully for $GOOS/$GOARCH"
        rm -f tunnel-client-$GOOS-$GOARCH$EXT tunnel-server-$GOOS-$GOARCH$EXT

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'
      continue-on-error: true

    - name: Security scan completed
      run: echo "security scan completed successfully"

 