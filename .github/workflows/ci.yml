name: 🚀 CI Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'
  CACHE_VERSION: v1

jobs:
  quality:
    name: 🔍 code quality
    runs-on: ubuntu-latest
    steps:
    - name: 📥 checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 setup go environment
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false

    - name: 📦 cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-go-${{ hashFiles('**/go.sum', '**/go.work.sum') }}
        restore-keys: |
          ${{ env.CACHE_VERSION }}-${{ runner.os }}-go-

    - name: 📋 download dependencies
      run: make deps

    - name: 🎨 check code formatting
      run: |
        echo "🔍 Checking code formatting..."
        make fmt
        if [ -n "$(git status --porcelain)" ]; then
          echo "❌ Code is not formatted properly"
          echo "📋 Here are the formatting issues:"
          git diff
          exit 1
        fi
        echo "✅ Code formatting is correct"

    - name: 🔎 run linter
      run: |
        echo "🔍 Running linter checks..."
        make lint
        echo "✅ Linting completed successfully"

    - name: 🛡️ security scan
      uses: securego/gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'
      continue-on-error: true

    - name: 📊 upload security scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: gosec.sarif
      continue-on-error: true

  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: [quality]
    steps:
    - name: 📥 checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 setup go environment
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false

    - name: 📦 cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-go-${{ hashFiles('**/go.sum', '**/go.work.sum') }}
        restore-keys: |
          ${{ env.CACHE_VERSION }}-${{ runner.os }}-go-

    - name: 📋 download dependencies
      run: make deps

    - name: 🏃 run tests
      run: |
        echo "🧪 Running test suite..."
        make test
        echo "✅ Tests completed successfully"

    - name: 📊 generate coverage report
      run: |
        echo "📊 Generating coverage reports for all modules..."
        coverage_files=""
        
        for dir in $(find . -name "go.mod" -not -path "./go.work*" -exec dirname {} \; | sort); do
          module_name=$(basename "$dir")
          echo "🔍 Processing module: $module_name (in $dir)"
          
          (cd "$dir" && go test -v -coverprofile="coverage-${module_name}.out" ./...)
          
          if [ -f "$dir/coverage-${module_name}.out" ]; then
            echo "✅ Coverage generated for $module_name"
            coverage_files="$coverage_files $dir/coverage-${module_name}.out"
          fi
        done
        
        echo "📋 Coverage files generated: $coverage_files"

    - name: 📈 upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: "**/coverage-*.out"
        retention-days: 30

  build:
    name: 🏗️ Build (${{ matrix.goos }}/${{ matrix.goarch }})
    runs-on: ubuntu-latest
    needs: [quality, test]
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
            name: "🐧 Linux AMD64"
          - goos: linux
            goarch: arm64
            name: "🐧 Linux ARM64"
          - goos: darwin
            goarch: amd64
            name: "🍎 macOS Intel"
          - goos: darwin
            goarch: arm64
            name: "🍎 macOS Apple Silicon"
          - goos: windows
            goarch: amd64
            name: "🪟 Windows AMD64"
    steps:
    - name: 📥 checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 setup go environment
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false

    - name: 📦 cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-go-${{ hashFiles('**/go.sum', '**/go.work.sum') }}
        restore-keys: |
          ${{ env.CACHE_VERSION }}-${{ runner.os }}-go-

    - name: 📋 download dependencies
      run: make deps

    - name: 🔨 build binaries for ${{ matrix.name }}
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        EXT=""
        if [ "$GOOS" = "windows" ]; then
          EXT=".exe"
        fi
        
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        GIT_COMMIT=${GITHUB_SHA::7}
        GIT_TAG=${GITHUB_REF#refs/tags/}
        VERSION="0.0.1a"
        
        echo "🏗️ Building funnel client for ${{ matrix.name }}..."
        GOOS=$GOOS GOARCH=$GOARCH go build \
          -ldflags "-X github.com/karol-broda/funnel/version.Version=$VERSION \
                    -X github.com/karol-broda/funnel/version.BuildDate=$BUILD_DATE \
                    -X github.com/karol-broda/funnel/version.GitCommit=$GIT_COMMIT \
                    -X github.com/karol-broda/funnel/version.GitTag=$GIT_TAG \
                    -s -w" \
          -o funnel-$GOOS-$GOARCH$EXT \
          ./cmd/funnel
        
        echo "🏗️ Building funnel server for ${{ matrix.name }}..."
        GOOS=$GOOS GOARCH=$GOARCH go build \
          -ldflags "-X github.com/karol-broda/funnel/version.Version=$VERSION \
                    -X github.com/karol-broda/funnel/version.BuildDate=$BUILD_DATE \
                    -X github.com/karol-broda/funnel/version.GitCommit=$GIT_COMMIT \
                    -X github.com/karol-broda/funnel/version.GitTag=$GIT_TAG \
                    -s -w" \
          -o funnel-server-$GOOS-$GOARCH$EXT \
          ./cmd/server
        
        echo "✅ Build completed successfully for ${{ matrix.name }}"
        
        if [ -f "funnel-$GOOS-$GOARCH$EXT" ] && [ -f "funnel-server-$GOOS-$GOARCH$EXT" ]; then
          echo "📦 Binary sizes:"
          ls -lh funnel*-$GOOS-$GOARCH$EXT
        else
          echo "❌ Build verification failed"
          exit 1
        fi
        
        rm -f funnel-$GOOS-$GOARCH$EXT funnel-server-$GOOS-$GOARCH$EXT

  build-summary:
    name: 📋 Build Summary
    runs-on: ubuntu-latest
    needs: [build]
    if: always()
    steps:
    - name: 📊 build results summary
      run: |
        echo "## 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Platform | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🐧 Linux AMD64 | ${{ needs.build.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🐧 Linux ARM64 | ${{ needs.build.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🍎 macOS Intel | ${{ needs.build.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🍎 macOS Apple Silicon | ${{ needs.build.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🪟 Windows AMD64 | ${{ needs.build.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 Code Quality: ${{ needs.quality.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🧪 Tests: ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🏗️ Builds: ${{ needs.build.result == 'success' && '✅ All Successful' || '❌ Some Failed' }}" >> $GITHUB_STEP_SUMMARY 