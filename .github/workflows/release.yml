name: 🚀 release & distribution

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  pull-requests: read
  issues: read
  actions: read

env:
  GO_VERSION: '1.21'
  CACHE_VERSION: v1

jobs:
  validate:
    name: 🔍 validate release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
    - name: 📥 checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏷️ determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
          IS_PRERELEASE="${{ github.event.release.prerelease }}"
        elif [ "${{ github.event_name }}" = "push" ]; then
          VERSION="${GITHUB_REF#refs/tags/}"
          IS_PRERELEASE="false"
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="false"
        else
          echo "❌ unknown trigger event"
          exit 1
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        
        echo "📋 release information:"
        echo "  version: $VERSION"
        echo "  pre-release: $IS_PRERELEASE"
        echo "  event: ${{ github.event_name }}"

    - name: 🔧 setup go environment
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false  # disable automatic caching for go workspaces

    - name: 💾 cache go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('go.work.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-

    - name: 📋 download dependencies
      run: make deps

    - name: ✅ validate version consistency
      env:
        GIT_VERSION: ${{ steps.version.outputs.version }}
      run: |
        echo "🔍 validating version consistency..."
        
        # extract version from version package
        PACKAGE_VERSION=$(grep -E '^[[:space:]]*Version[[:space:]]*=' version/version.go | sed -E 's/.*"([^"]+)".*/\1/')
        
        if [ -z "$PACKAGE_VERSION" ]; then
          echo "❌ failed to extract version from version/version.go"
          exit 1
        fi
        
        echo "📋 version comparison:"
        echo "  git tag version: $GIT_VERSION"  
        echo "  package version: $PACKAGE_VERSION"
        
        # normalize versions for comparison (remove 'v' prefix if present)
        GIT_VERSION_CLEAN="${GIT_VERSION#v}"
        PACKAGE_VERSION_CLEAN="${PACKAGE_VERSION#v}"
        
        if [ "$GIT_VERSION_CLEAN" != "$PACKAGE_VERSION_CLEAN" ]; then
          echo "❌ version mismatch detected!"
          echo "   git tag version: '$GIT_VERSION_CLEAN'"
          echo "   package version: '$PACKAGE_VERSION_CLEAN'"
          echo ""
          echo "💡 to fix this issue:"
          echo "   1. update version/version.go to match tag version"
          echo "   2. or create a new tag that matches the package version"
          exit 1
        fi
        
        echo "✅ version consistency validated successfully"
        echo "   both git tag and package version are: $PACKAGE_VERSION_CLEAN"

    - name: 🧪 run tests
      run: |
        echo "🧪 running tests before release..."
        make test
        echo "✅ tests passed successfully"

  build-release:
    name: 🏗️ build release (${{ matrix.goos }}/${{ matrix.goarch }})
    runs-on: ubuntu-latest
    needs: [validate]
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
            name: "linux amd64"
            emoji: "🐧"
          - goos: linux
            goarch: arm64
            name: "linux arm64"
            emoji: "🐧"
          - goos: darwin
            goarch: amd64
            name: "macos intel"
            emoji: "🍎"
          - goos: darwin
            goarch: arm64
            name: "macos apple silicon"
            emoji: "🍎"
          - goos: windows
            goarch: amd64
            name: "windows amd64"
            emoji: "🪟"
    steps:
    - name: 📥 checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 setup go environment
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false  # disable automatic caching for go workspaces

    - name: 💾 cache go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('go.work.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-

    - name: 📋 download dependencies
      run: make deps

    - name: 🔨 build release binaries
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        VERSION: ${{ needs.validate.outputs.version }}
      run: |
        EXT=""
        if [ "$GOOS" = "windows" ]; then
          EXT=".exe"
        fi
        
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        GIT_COMMIT=${GITHUB_SHA::7}
        GIT_TAG=$VERSION
        
        echo "🏗️ building release binaries for ${{ matrix.emoji }} ${{ matrix.name }}..."
        echo "  version: $VERSION"
        echo "  build date: $BUILD_DATE"
        echo "  git commit: $GIT_COMMIT"
        
        mkdir -p dist
        
        # build client
        echo "📦 building funnel client..."
        GOOS=$GOOS GOARCH=$GOARCH go build \
          -ldflags "-X github.com/karol-broda/funnel/version.Version=$VERSION \
                    -X github.com/karol-broda/funnel/version.BuildDate=$BUILD_DATE \
                    -X github.com/karol-broda/funnel/version.GitCommit=$GIT_COMMIT \
                    -X github.com/karol-broda/funnel/version.GitTag=$GIT_TAG \
                    -s -w" \
          -o dist/funnel-$GOOS-$GOARCH$EXT \
          ./cmd/funnel
        
        # build server
        echo "📦 building funnel server..."
        GOOS=$GOOS GOARCH=$GOARCH go build \
          -ldflags "-X github.com/karol-broda/funnel/version.Version=$VERSION \
                    -X github.com/karol-broda/funnel/version.BuildDate=$BUILD_DATE \
                    -X github.com/karol-broda/funnel/version.GitCommit=$GIT_COMMIT \
                    -X github.com/karol-broda/funnel/version.GitTag=$GIT_TAG \
                    -s -w" \
          -o dist/funnel-server-$GOOS-$GOARCH$EXT \
          ./cmd/server
        
        echo "✅ build completed successfully"
        echo "📊 binary information:"
        ls -lh dist/funnel*-$GOOS-$GOARCH$EXT

    - name: 📦 create release archive
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        VERSION: ${{ needs.validate.outputs.version }}
      run: |
        EXT=""
        if [ "$GOOS" = "windows" ]; then
          EXT=".exe"
        fi
        
        ARCHIVE_NAME="funnel-$VERSION-$GOOS-$GOARCH"
        
        echo "📦 creating release archive: $ARCHIVE_NAME"
        
        mkdir -p "$ARCHIVE_NAME"
        cp dist/funnel-$GOOS-$GOARCH$EXT "$ARCHIVE_NAME/funnel$EXT"
        cp dist/funnel-server-$GOOS-$GOARCH$EXT "$ARCHIVE_NAME/funnel-server$EXT"
        cp README.md "$ARCHIVE_NAME/"
        cp LICENSE.md "$ARCHIVE_NAME/"
        
        # create checksums
        cd "$ARCHIVE_NAME"
        if command -v sha256sum >/dev/null 2>&1; then
          sha256sum * > SHA256SUMS
        else
          shasum -a 256 * > SHA256SUMS
        fi
        cd ..
        
        # create archive
        if [ "$GOOS" = "windows" ]; then
          zip -r "$ARCHIVE_NAME.zip" "$ARCHIVE_NAME"
        else
          tar -czf "$ARCHIVE_NAME.tar.gz" "$ARCHIVE_NAME"
        fi
        
        echo "✅ archive created successfully"
        ls -lh "$ARCHIVE_NAME".*

    - name: 📤 upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: funnel-${{ matrix.goos }}-${{ matrix.goarch }}
        path: funnel-${{ needs.validate.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.*
        retention-days: 90

  create-release:
    name: 🎉 create github release
    runs-on: ubuntu-latest
    needs: [validate, build-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
    - name: 📥 checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 📥 download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: 📋 prepare release assets
      run: |
        echo "📦 preparing release assets..."
        mkdir -p release-assets
        find artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
          cp "$file" release-assets/
        done
        
        echo "📊 release assets:"
        ls -lh release-assets/

    - name: 📝 generate release notes
      id: release-notes
      env:
        VERSION: ${{ needs.validate.outputs.version }}
      run: |
        echo "📝 generating release notes..."
        
        # try to get previous tag for changelog
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null | head -n 1 || echo "")
        
        RELEASE_NOTES="## 🚀 release $VERSION
        
        ### 📦 Downloads
        
        | Platform | Architecture | Download |
        |----------|-------------|----------|
        | 🐧 Linux | AMD64 | [funnel-$VERSION-linux-amd64.tar.gz](https://github.com/${{ github.repository }}/releases/download/$VERSION/funnel-$VERSION-linux-amd64.tar.gz) |
        | 🐧 Linux | ARM64 | [funnel-$VERSION-linux-arm64.tar.gz](https://github.com/${{ github.repository }}/releases/download/$VERSION/funnel-$VERSION-linux-arm64.tar.gz) |
        | 🍎 macOS | Intel | [funnel-$VERSION-darwin-amd64.tar.gz](https://github.com/${{ github.repository }}/releases/download/$VERSION/funnel-$VERSION-darwin-amd64.tar.gz) |
        | 🍎 macOS | Apple Silicon | [funnel-$VERSION-darwin-arm64.tar.gz](https://github.com/${{ github.repository }}/releases/download/$VERSION/funnel-$VERSION-darwin-arm64.tar.gz) |
        | 🪟 Windows | AMD64 | [funnel-$VERSION-windows-amd64.zip](https://github.com/${{ github.repository }}/releases/download/$VERSION/funnel-$VERSION-windows-amd64.zip) |
        
        ### 🔧 installation
        
        1. download the appropriate binary for your platform
        2. extract the archive
        3. move the binaries to your PATH
        
        ### 🏗️ build information
        
        - **build date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - **git commit**: ${GITHUB_SHA::7}
        - **go version**: ${{ env.GO_VERSION }}
        
        ### 🔍 verification
        
        each archive contains SHA256SUMS file for verification:
        \`\`\`bash
        # verify checksums
        sha256sum -c SHA256SUMS
        \`\`\`"
        
        if [ -n "$PREVIOUS_TAG" ]; then
          RELEASE_NOTES="$RELEASE_NOTES
        
        ### 📋 changes since $PREVIOUS_TAG
        
        \`\`\`
        $(git log --oneline --no-merges $PREVIOUS_TAG..HEAD | head -20)
        \`\`\`"
        fi
        
        echo "$RELEASE_NOTES" > release-notes.md
        echo "✅ release notes generated"

    - name: 🎉 create github release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate.outputs.version }}
        name: release ${{ needs.validate.outputs.version }}
        body_path: release-notes.md
        draft: false
        prerelease: ${{ needs.validate.outputs.is_prerelease == 'true' }}
        files: release-assets/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-release:
    name: 📢 publish release
    runs-on: ubuntu-latest
    needs: [validate, build-release, create-release]
    if: always() && (needs.create-release.result == 'success' || github.event_name == 'release')
    steps:
    - name: 📥 download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: 📊 upload to existing release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.release.tag_name }}
        files: artifacts/*/*
        append_body: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

 